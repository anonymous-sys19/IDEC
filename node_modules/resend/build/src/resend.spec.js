"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const resend_1 = require("./resend");
const jest_fetch_mock_1 = require("jest-fetch-mock");
(0, jest_fetch_mock_1.enableFetchMocks)();
const resend = new resend_1.Resend('re_924b3rjh2387fbewf823');
describe('Resend', () => {
    afterEach(() => fetchMock.resetMocks());
    it('throws API key error', () => {
        expect(() => new resend_1.Resend()).toThrowErrorMatchingSnapshot();
    });
    it('sends email', () => __awaiter(void 0, void 0, void 0, function* () {
        const payload = {
            from: 'bu@resend.com',
            to: 'zeno@resend.com',
            subject: 'Hello World',
            html: '<h1>Hello world</h1>',
        };
        fetchMock.mockOnce(JSON.stringify({
            id: '1234',
            from: 'bu@resend.com',
            to: 'zeno@resend.com',
            created_at: '123',
        }), {
            status: 200,
            headers: {
                'content-type': 'application/json',
                Authorization: 'Bearer re_924b3rjh2387fbewf823',
            },
        });
        const response = yield resend.emails.send(payload);
        const data = yield response;
        expect(data).toMatchInlineSnapshot(`
{
  "data": {
    "created_at": "123",
    "from": "bu@resend.com",
    "id": "1234",
    "to": "zeno@resend.com",
  },
  "error": null,
}
`);
    }));
    it('sends email with multiple recipients', () => __awaiter(void 0, void 0, void 0, function* () {
        const payload = {
            from: 'admin@resend.com',
            to: ['bu@resend.com', 'zeno@resend.com'],
            subject: 'Hello World',
            text: 'Hello world',
        };
        fetchMock.mockOnce(JSON.stringify({
            id: '1234',
            from: 'admin@resend.com',
            to: ['bu@resend.com', 'zeno@resend.com'],
            created_at: '123',
        }), {
            status: 200,
            headers: {
                'content-type': 'application/json',
                Authorization: 'Bearer re_924b3rjh2387fbewf823',
            },
        });
        const response = yield resend.emails.send(payload);
        const data = yield response;
        expect(data).toMatchInlineSnapshot(`
{
  "data": {
    "created_at": "123",
    "from": "admin@resend.com",
    "id": "1234",
    "to": [
      "bu@resend.com",
      "zeno@resend.com",
    ],
  },
  "error": null,
}
`);
    }));
    it('sends email with multiple bcc recipients', () => __awaiter(void 0, void 0, void 0, function* () {
        const payload = {
            from: 'admin@resend.com',
            to: 'bu@resend.com',
            bcc: ['foo@resend.com', 'bar@resend.com'],
            subject: 'Hello World',
            text: 'Hello world',
        };
        fetchMock.mockOnce(JSON.stringify({
            id: '1234',
            from: 'admin@resend.com',
            to: 'bu@resend.com',
            bcc: ['foo@resend.com', 'bar@resend.com'],
            created_at: '123',
        }), {
            status: 200,
            headers: {
                'content-type': 'application/json',
                Authorization: 'Bearer re_924b3rjh2387fbewf823',
            },
        });
        const response = yield resend.emails.send(payload);
        const data = yield response;
        expect(data).toMatchInlineSnapshot(`
{
  "data": {
    "bcc": [
      "foo@resend.com",
      "bar@resend.com",
    ],
    "created_at": "123",
    "from": "admin@resend.com",
    "id": "1234",
    "to": "bu@resend.com",
  },
  "error": null,
}
`);
    }));
    it('sends email with multiple cc recipients', () => __awaiter(void 0, void 0, void 0, function* () {
        const payload = {
            from: 'admin@resend.com',
            to: 'bu@resend.com',
            cc: ['foo@resend.com', 'bar@resend.com'],
            subject: 'Hello World',
            text: 'Hello world',
        };
        fetchMock.mockOnce(JSON.stringify({
            id: '1234',
            from: 'admin@resend.com',
            to: 'bu@resend.com',
            cc: ['foo@resend.com', 'bar@resend.com'],
            created_at: '123',
        }), {
            status: 200,
            headers: {
                'content-type': 'application/json',
                Authorization: 'Bearer re_924b3rjh2387fbewf823',
            },
        });
        const response = yield resend.emails.send(payload);
        const data = yield response;
        expect(data).toMatchInlineSnapshot(`
{
  "data": {
    "cc": [
      "foo@resend.com",
      "bar@resend.com",
    ],
    "created_at": "123",
    "from": "admin@resend.com",
    "id": "1234",
    "to": "bu@resend.com",
  },
  "error": null,
}
`);
    }));
    it('sends email with multiple replyTo emails', () => __awaiter(void 0, void 0, void 0, function* () {
        const payload = {
            from: 'admin@resend.com',
            to: 'bu@resend.com',
            reply_to: ['foo@resend.com', 'bar@resend.com'],
            subject: 'Hello World',
            text: 'Hello world',
        };
        fetchMock.mockOnce(JSON.stringify({
            id: '1234',
            from: 'admin@resend.com',
            to: 'bu@resend.com',
            reply_to: ['foo@resend.com', 'bar@resend.com'],
            created_at: '123',
        }), {
            status: 200,
            headers: {
                'content-type': 'application/json',
                Authorization: 'Bearer re_924b3rjh2387fbewf823',
            },
        });
        const response = yield resend.emails.send(payload);
        const data = yield response;
        expect(data).toMatchInlineSnapshot(`
{
  "data": {
    "created_at": "123",
    "from": "admin@resend.com",
    "id": "1234",
    "reply_to": [
      "foo@resend.com",
      "bar@resend.com",
    ],
    "to": "bu@resend.com",
  },
  "error": null,
}
`);
    }));
    it('can send an email with headers', () => __awaiter(void 0, void 0, void 0, function* () {
        const payload = {
            from: 'admin@resend.com',
            headers: {
                'X-Entity-Ref-ID': '123',
            },
            subject: 'Hello World',
            text: 'Hello world',
            to: 'bu@resend.com',
        };
        fetchMock.mockOnce(JSON.stringify({
            id: '1234',
        }), {
            status: 200,
            headers: {
                'content-type': 'application/json',
                Authorization: 'Bearer re_924b3rjh2387fbewf823',
            },
        });
        const response = yield resend.emails.send(payload);
        const data = yield response;
        expect(data).toMatchInlineSnapshot(`
{
  "data": {
    "id": "1234",
  },
  "error": null,
}
`);
    }));
    it('throws an error when an ErrorResponse is returned', () => __awaiter(void 0, void 0, void 0, function* () {
        const payload = {
            from: 'resend.com',
            to: 'bu@resend.com',
            reply_to: ['foo@resend.com', 'bar@resend.com'],
            subject: 'Hello World',
            text: 'Hello world',
        };
        const errorResponse = {
            name: 'invalid_parameter',
            message: 'Invalid `from` field. The email address needs to follow the `email@example.com` or `Name <email@example.com>` format',
        };
        fetchMock.mockOnce(JSON.stringify(errorResponse), {
            status: 422,
            headers: {
                'content-type': 'application/json',
                Authorization: 'Bearer re_924b3rjh2387fbewf823',
            },
        });
        const result = resend.emails.send(payload);
        yield expect(result).resolves.toMatchInlineSnapshot(`
{
  "data": null,
  "error": {
    "message": "Invalid \`from\` field. The email address needs to follow the \`email@example.com\` or \`Name <email@example.com>\` format",
    "name": "invalid_parameter",
  },
}
`);
    }));
});
