"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const jest_fetch_mock_1 = require("jest-fetch-mock");
const resend_1 = require("../resend");
(0, jest_fetch_mock_1.enableFetchMocks)();
const resend = new resend_1.Resend('re_zKa4RCko_Lhm9ost2YjNCctnPjbLw8Nop');
describe('Batch', () => {
    afterEach(() => fetchMock.resetMocks());
    describe('create', () => {
        it('sends multiple emails', () => __awaiter(void 0, void 0, void 0, function* () {
            const payload = [
                {
                    from: 'bu@resend.com',
                    to: 'zeno@resend.com',
                    subject: 'Hello World',
                    html: '<h1>Hello world</h1>',
                },
                {
                    from: 'vitor@resend.com',
                    to: 'zeno@resend.com',
                    subject: 'Ol치 mundo',
                    html: '<h1>ol치 mundo</h1>',
                },
                {
                    from: 'bu@resend.com',
                    to: 'vitor@resend.com',
                    subject: 'Hi there',
                    html: '<h1>Hi there</h1>',
                },
            ];
            fetchMock.mockOnce(JSON.stringify({
                data: [{ id: '1234' }, { id: '4567' }, { id: '4242' }],
            }), {
                status: 200,
                headers: {
                    'content-type': 'application/json',
                    Authorization: 'Bearer re_zKa4RCko_Lhm9ost2YjNCctnPjbLw8Nop',
                },
            });
            const data = yield resend.batch.create(payload);
            expect(data).toMatchInlineSnapshot(`
{
  "data": {
    "data": [
      {
        "id": "1234",
      },
      {
        "id": "4567",
      },
      {
        "id": "4242",
      },
    ],
  },
  "error": null,
}
`);
        }));
    });
    describe('send', () => {
        it('sends multiple emails', () => __awaiter(void 0, void 0, void 0, function* () {
            const payload = [
                {
                    from: 'bu@resend.com',
                    to: 'zeno@resend.com',
                    subject: 'Hello World',
                    html: '<h1>Hello world</h1>',
                },
                {
                    from: 'vitor@resend.com',
                    to: 'zeno@resend.com',
                    subject: 'Ol치 mundo',
                    html: '<h1>ol치 mundo</h1>',
                },
                {
                    from: 'bu@resend.com',
                    to: 'vitor@resend.com',
                    subject: 'Hi there',
                    html: '<h1>Hi there</h1>',
                },
            ];
            fetchMock.mockOnce(JSON.stringify({
                data: [{ id: '1234' }, { id: '4567' }, { id: '4242' }],
            }), {
                status: 200,
                headers: {
                    'content-type': 'application/json',
                    Authorization: 'Bearer re_zKa4RCko_Lhm9ost2YjNCctnPjbLw8Nop',
                },
            });
            const data = yield resend.batch.send(payload);
            expect(data).toMatchInlineSnapshot(`
{
  "data": {
    "data": [
      {
        "id": "1234",
      },
      {
        "id": "4567",
      },
      {
        "id": "4242",
      },
    ],
  },
  "error": null,
}
`);
        }));
    });
});
