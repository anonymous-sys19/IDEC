"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Resend = void 0;
const package_json_1 = require("../package.json");
const api_keys_1 = require("./api-keys/api-keys");
const batch_1 = require("./batch/batch");
const domains_1 = require("./domains/domains");
const emails_1 = require("./emails/emails");
const guards_1 = require("./guards");
const baseUrl = process.env.RESEND_BASE_URL || 'https://api.resend.com';
const userAgent = process.env.RESEND_USER_AGENT || `resend-node:${package_json_1.version}`;
class Resend {
    constructor(key) {
        this.key = key;
        this.apiKeys = new api_keys_1.ApiKeys(this);
        this.domains = new domains_1.Domains(this);
        this.emails = new emails_1.Emails(this);
        this.batch = new batch_1.Batch(this);
        if (!key) {
            this.key = process.env.RESEND_API_KEY;
            if (!this.key) {
                throw new Error('Missing API key. Pass it to the constructor `new Resend("re_123")`');
            }
        }
        this.headers = new Headers({
            Authorization: `Bearer ${this.key}`,
            'User-Agent': userAgent,
            'Content-Type': 'application/json',
        });
    }
    fetchRequest(path, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield fetch(`${baseUrl}${path}`, options);
            if (!response.ok) {
                const error = yield response.json();
                if ((0, guards_1.isResendErrorResponse)(error)) {
                    return { data: null, error };
                }
                return { data: null, error };
            }
            const data = yield response.json();
            return { data, error: null };
        });
    }
    post(path, entity, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestOptions = Object.assign({ method: 'POST', headers: this.headers, body: JSON.stringify(entity) }, options);
            return this.fetchRequest(path, requestOptions);
        });
    }
    get(path, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestOptions = Object.assign({ method: 'GET', headers: this.headers }, options);
            return this.fetchRequest(path, requestOptions);
        });
    }
    put(path, entity, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestOptions = Object.assign({ method: 'PUT', headers: this.headers, body: JSON.stringify(entity) }, options);
            return this.fetchRequest(path, requestOptions);
        });
    }
    delete(path, query) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestOptions = {
                method: 'DELETE',
                headers: this.headers,
                body: JSON.stringify(query),
            };
            return this.fetchRequest(path, requestOptions);
        });
    }
}
exports.Resend = Resend;
