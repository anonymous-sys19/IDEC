"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isResendErrorResponseStrict = exports.isResendErrorResponse = void 0;
const interfaces_1 = require("./interfaces");
const isResendErrorResponse = (response) => {
    if (typeof response !== 'object' || response === null) {
        return false;
    }
    const error = response;
    if (typeof error !== 'object' || error === null) {
        return false;
    }
    const { message, name } = error;
    return typeof message === 'string' && typeof name === 'string';
};
exports.isResendErrorResponse = isResendErrorResponse;
/**
 * Consider whether to use this stricter version of the type guard.
 *
 * Right now, it's not used as there is a risk that an API error will not be
 * caught due to the API being ahead of the current types.
 */
const isResendErrorResponseStrict = (response) => {
    if (typeof response !== 'object' || response === null) {
        return false;
    }
    const error = response;
    if (typeof error !== 'object' || error === null) {
        return false;
    }
    const { message, name } = error;
    return (typeof message === 'string' &&
        typeof name === 'string' &&
        name in interfaces_1.RESEND_ERROR_CODES_BY_KEY);
};
exports.isResendErrorResponseStrict = isResendErrorResponseStrict;
