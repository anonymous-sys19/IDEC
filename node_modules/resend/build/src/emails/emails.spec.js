"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const jest_fetch_mock_1 = require("jest-fetch-mock");
const resend_1 = require("../resend");
(0, jest_fetch_mock_1.enableFetchMocks)();
const resend = new resend_1.Resend('re_zKa4RCko_Lhm9ost2YjNCctnPjbLw8Nop');
describe('Emails', () => {
    afterEach(() => fetchMock.resetMocks());
    describe('create', () => {
        it('sends email', () => __awaiter(void 0, void 0, void 0, function* () {
            const errorResponse = {
                name: 'missing_required_field',
                message: 'Missing `from` field.',
            };
            fetchMock.mockOnce(JSON.stringify(errorResponse), {
                status: 422,
                headers: {
                    'content-type': 'application/json',
                    Authorization: 'Bearer re_zKa4RCko_Lhm9ost2YjNCctnPjbLw8Nop',
                },
            });
            const data = yield resend.emails.create({});
            console.log({ data });
            expect(data).toMatchInlineSnapshot(`
{
  "data": null,
  "error": {
    "message": "Missing \`from\` field.",
    "name": "missing_required_field",
  },
}
`);
        }));
    });
    describe('send', () => {
        it('sends email', () => __awaiter(void 0, void 0, void 0, function* () {
            const payload = {
                from: 'bu@resend.com',
                to: 'zeno@resend.com',
                subject: 'Hello World',
                html: '<h1>Hello world</h1>',
            };
            fetchMock.mockOnce(JSON.stringify({ id: '1234' }), {
                status: 200,
                headers: {
                    'content-type': 'application/json',
                    Authorization: 'Bearer re_zKa4RCko_Lhm9ost2YjNCctnPjbLw8Nop',
                },
            });
            const data = yield resend.emails.send(payload);
            expect(data).toMatchInlineSnapshot(`
{
  "data": {
    "id": "1234",
  },
  "error": null,
}
`);
        }));
    });
    describe('get', () => {
        describe('when email not found', () => {
            it('returns error', () => __awaiter(void 0, void 0, void 0, function* () {
                const errorResponse = {
                    name: 'not_found',
                    message: 'Email not found',
                };
                fetchMock.mockOnce(JSON.stringify(errorResponse), {
                    status: 404,
                    headers: {
                        'content-type': 'application/json',
                        Authorization: 'Bearer re_zKa4RCko_Lhm9ost2YjNCctnPjbLw8Nop',
                    },
                });
                const result = resend.emails.get('1234');
                yield expect(result).resolves.toMatchInlineSnapshot(`
{
  "data": null,
  "error": {
    "message": "Email not found",
    "name": "not_found",
  },
}
`);
            }));
        });
        describe('when email found', () => {
            it('returns emails with only to', () => __awaiter(void 0, void 0, void 0, function* () {
                const response = {
                    object: 'email',
                    id: '123',
                    to: ['zeno@resend.com'],
                    from: 'bu@resend.com',
                    created_at: '321',
                    subject: 'Test email',
                    html: '<p>hello hello</p>',
                    text: null,
                    bcc: null,
                    cc: null,
                    reply_to: null,
                    last_event: 'sent',
                };
                fetchMock.mockOnce(JSON.stringify(response), {
                    status: 200,
                    headers: {
                        'content-type': 'application/json',
                        Authorization: 'Bearer re_zKa4RCko_Lhm9ost2YjNCctnPjbLw8Nop',
                    },
                });
                yield expect(resend.emails.get('1234')).resolves.toMatchInlineSnapshot(`
{
  "data": {
    "bcc": null,
    "cc": null,
    "created_at": "321",
    "from": "bu@resend.com",
    "html": "<p>hello hello</p>",
    "id": "123",
    "last_event": "sent",
    "object": "email",
    "reply_to": null,
    "subject": "Test email",
    "text": null,
    "to": [
      "zeno@resend.com",
    ],
  },
  "error": null,
}
`);
            }));
            it('returns emails with to and multiple cc', () => __awaiter(void 0, void 0, void 0, function* () {
                const response = {
                    object: 'email',
                    id: '123',
                    to: ['zeno@resend.com'],
                    from: 'bu@resend.com',
                    created_at: '321',
                    subject: 'Test email',
                    html: '<p>hello hello</p>',
                    text: null,
                    bcc: null,
                    cc: ['zeno@resend.com', 'bu@resend.com'],
                    reply_to: null,
                    last_event: 'sent',
                };
                fetchMock.mockOnce(JSON.stringify(response), {
                    status: 200,
                    headers: {
                        'content-type': 'application/json',
                        Authorization: 'Bearer re_zKa4RCko_Lhm9ost2YjNCctnPjbLw8Nop',
                    },
                });
                yield expect(resend.emails.get('1234')).resolves.toMatchInlineSnapshot(`
{
  "data": {
    "bcc": null,
    "cc": [
      "zeno@resend.com",
      "bu@resend.com",
    ],
    "created_at": "321",
    "from": "bu@resend.com",
    "html": "<p>hello hello</p>",
    "id": "123",
    "last_event": "sent",
    "object": "email",
    "reply_to": null,
    "subject": "Test email",
    "text": null,
    "to": [
      "zeno@resend.com",
    ],
  },
  "error": null,
}
`);
            }));
        });
    });
});
