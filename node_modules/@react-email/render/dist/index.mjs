var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/render.ts
import * as ReactDomServer from "react-dom/server";
import { convert } from "html-to-text";
import pretty from "pretty";
var render = (component, options) => {
  if (options == null ? void 0 : options.plainText) {
    return renderAsPlainText(component, options);
  }
  const doctype = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">';
  const markup = ReactDomServer.renderToStaticMarkup(component);
  const document = `${doctype}${markup}`;
  if (options && options.pretty) {
    return pretty(document);
  }
  return document;
};
var renderAsPlainText = (component, _options) => {
  return convert(ReactDomServer.renderToStaticMarkup(component), {
    selectors: [
      { selector: "img", format: "skip" },
      { selector: "#__react-email-preview", format: "skip" }
    ]
  });
};

// src/render-async.ts
import { convert as convert2 } from "html-to-text";
import pretty2 from "pretty";
var readStream = (readableStream) => __async(void 0, null, function* () {
  const reader = readableStream.getReader();
  const chunks = [];
  while (true) {
    const { value, done } = yield reader.read();
    if (done) {
      break;
    }
    chunks.push(value);
  }
  return chunks.map((chunk) => new TextDecoder("utf-8").decode(chunk)).join("");
});
var renderAsync = (component, options) => __async(void 0, null, function* () {
  const reactDOMServer = (yield import("react-dom/server")).default;
  const renderToStream = reactDOMServer.renderToReadableStream || reactDOMServer.renderToString || reactDOMServer.renderToPipeableStream;
  const doctype = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">';
  const readableStream = yield renderToStream(component);
  const html = typeof readableStream === "string" ? readableStream : yield readStream(readableStream);
  if (options == null ? void 0 : options.plainText) {
    return convert2(html, {
      selectors: [
        { selector: "img", format: "skip" },
        { selector: "#__react-email-preview", format: "skip" }
      ]
    });
  }
  const document = `${doctype}${html}`;
  if (options == null ? void 0 : options.pretty) {
    return pretty2(document);
  }
  return document;
});
export {
  render,
  renderAsync
};
